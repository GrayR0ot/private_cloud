version: '3.4'
services:
  database-postgres:
    image: postgres
    networks:
      internal:
    environment:
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_DB: $POSTGRES_USER
    volumes:
      - database-postgres:/var/lib/postgresql/data
  sonar-qube:
    image: sonarqube:lts-community
    depends_on:
      - database-postgres
    networks:
      traefik-public:
      internal:
    environment:
      SONAR_JDBC_URL: $SONAR_JDBC_URL
      SONAR_JDBC_USERNAME: $POSTGRES_USER
      SONAR_JDBC_PASSWORD: $POSTGRES_PASSWORD
    volumes:
      - sonarqube-data:/opt/sonarqube/data
      - sonarqube-logs:/opt/sonarqube/logs
      - sonarqube-extensions:/opt/sonarqube/extensions
    logging:
      driver: json-file
    deploy:
      replicas: 1
      labels:
        traefik.http.routers.grayroot-sonar-qube-http.tls.certresolver: cf
        traefik.http.services.grayroot-sonar-qube-http.loadbalancer.server.port: '9000'
        traefik.http.routers.grayroot-sonar-qube-http.tls: 'true'
        traefik.http.routers.grayroot-sonar-qube-http.rule: Host(`$DOMAIN`)
        traefik.http.routers.grayroot-sonar-qube-http.entrypoints: https
        traefik.constraint-label: traefik-public
        traefik.docker.network: traefik-public
        traefik.enable: 'true'
    

volumes:
  database-postgres:
  sonarqube-data:
  sonarqube-logs:
  sonarqube-extensions:

networks:
  internal:
  traefik-public:
    external: true
